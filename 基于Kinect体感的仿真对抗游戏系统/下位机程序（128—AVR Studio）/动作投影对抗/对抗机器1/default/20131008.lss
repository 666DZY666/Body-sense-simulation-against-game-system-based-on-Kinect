
20131008.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a5c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001d5  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ff4  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003ab  00000000  00000000  00001cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000e31  00000000  00000000  000020a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000345  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006da  00000000  00000000  0000340d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00003ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  b6:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <leftxia>:
	    SetServoPosition(3,134,Duosu);
     }

void  leftxia()                            //左手下举
     {
	    SetServoPosition(1,493,Duosu);
  be:	40 91 00 01 	lds	r20, 0x0100
  c2:	50 91 01 01 	lds	r21, 0x0101
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	6d ee       	ldi	r22, 0xED	; 237
  ca:	71 e0       	ldi	r23, 0x01	; 1
  cc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,536,Duosu);
  d0:	40 91 00 01 	lds	r20, 0x0100
  d4:	50 91 01 01 	lds	r21, 0x0101
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	68 e1       	ldi	r22, 0x18	; 24
  dc:	72 e0       	ldi	r23, 0x02	; 2
  de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(3,276,Duosu);
  e2:	40 91 00 01 	lds	r20, 0x0100
  e6:	50 91 01 01 	lds	r21, 0x0101
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	64 e1       	ldi	r22, 0x14	; 20
  ee:	71 e0       	ldi	r23, 0x01	; 1
  f0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	 }
  f4:	08 95       	ret

000000f6 <leftgou>:
		SetServoPosition(3,134,Duosu);
	  }

void  leftgou()                            //左勾手
     {
	    SetServoPosition(1,339,Duosu);
  f6:	40 91 00 01 	lds	r20, 0x0100
  fa:	50 91 01 01 	lds	r21, 0x0101
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	63 e5       	ldi	r22, 0x53	; 83
 102:	71 e0       	ldi	r23, 0x01	; 1
 104:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,395,Duosu);
 108:	40 91 00 01 	lds	r20, 0x0100
 10c:	50 91 01 01 	lds	r21, 0x0101
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	6b e8       	ldi	r22, 0x8B	; 139
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(3,134,Duosu);
 11a:	40 91 00 01 	lds	r20, 0x0100
 11e:	50 91 01 01 	lds	r21, 0x0101
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	66 e8       	ldi	r22, 0x86	; 134
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
     }
 12c:	08 95       	ret

0000012e <leftqian>:
	    SetServoPosition(3,29,Duosu);
      }

void   leftqian()                          //左手前伸
     {
	    SetServoPosition(1,493,Duosu);
 12e:	40 91 00 01 	lds	r20, 0x0100
 132:	50 91 01 01 	lds	r21, 0x0101
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	6d ee       	ldi	r22, 0xED	; 237
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,536,Duosu);
 140:	40 91 00 01 	lds	r20, 0x0100
 144:	50 91 01 01 	lds	r21, 0x0101
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	68 e1       	ldi	r22, 0x18	; 24
 14c:	72 e0       	ldi	r23, 0x02	; 2
 14e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(3,134,Duosu);
 152:	40 91 00 01 	lds	r20, 0x0100
 156:	50 91 01 01 	lds	r21, 0x0101
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	66 e8       	ldi	r22, 0x86	; 134
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	  }
 164:	08 95       	ret

00000166 <leftgao>:
		SetServoPosition(3,314,Duosu);
	   }

void  leftgao()                            //左手高举
     {
	    SetServoPosition(1,493,Duosu);
 166:	40 91 00 01 	lds	r20, 0x0100
 16a:	50 91 01 01 	lds	r21, 0x0101
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	6d ee       	ldi	r22, 0xED	; 237
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,536,Duosu);
 178:	40 91 00 01 	lds	r20, 0x0100
 17c:	50 91 01 01 	lds	r21, 0x0101
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	68 e1       	ldi	r22, 0x18	; 24
 184:	72 e0       	ldi	r23, 0x02	; 2
 186:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(3,29,Duosu);
 18a:	40 91 00 01 	lds	r20, 0x0100
 18e:	50 91 01 01 	lds	r21, 0x0101
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	6d e1       	ldi	r22, 0x1D	; 29
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
      }
 19c:	08 95       	ret

0000019e <leftinit>:
	    SetServoPosition(6,442,Duosu);
	 }

void   leftinit()                          //左手初始化     
      { 
	    SetServoPosition(1,323,Duosu);
 19e:	40 91 00 01 	lds	r20, 0x0100
 1a2:	50 91 01 01 	lds	r21, 0x0101
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	63 e4       	ldi	r22, 0x43	; 67
 1aa:	71 e0       	ldi	r23, 0x01	; 1
 1ac:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,532,Duosu);
 1b0:	40 91 00 01 	lds	r20, 0x0100
 1b4:	50 91 01 01 	lds	r21, 0x0101
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	64 e1       	ldi	r22, 0x14	; 20
 1bc:	72 e0       	ldi	r23, 0x02	; 2
 1be:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(3,314,Duosu);
 1c2:	40 91 00 01 	lds	r20, 0x0100
 1c6:	50 91 01 01 	lds	r21, 0x0101
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	6a e3       	ldi	r22, 0x3A	; 58
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	   }
 1d4:	08 95       	ret

000001d6 <rightxia>:
	    SetServoPosition(6,562,Duosu);
     }

void  rightxia()                           //右手下举
     {
        SetServoPosition(4,579,Duosu);
 1d6:	40 91 00 01 	lds	r20, 0x0100
 1da:	50 91 01 01 	lds	r21, 0x0101
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	63 e4       	ldi	r22, 0x43	; 67
 1e2:	72 e0       	ldi	r23, 0x02	; 2
 1e4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
        SetServoPosition(5,503,Duosu);
 1e8:	40 91 00 01 	lds	r20, 0x0100
 1ec:	50 91 01 01 	lds	r21, 0x0101
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	67 ef       	ldi	r22, 0xF7	; 247
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(6,442,Duosu);
 1fa:	40 91 00 01 	lds	r20, 0x0100
 1fe:	50 91 01 01 	lds	r21, 0x0101
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	6a eb       	ldi	r22, 0xBA	; 186
 206:	71 e0       	ldi	r23, 0x01	; 1
 208:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	 }
 20c:	08 95       	ret

0000020e <rightgou>:
		SetServoPosition(6,442,Duosu);
	 }

void  rightgou()                            //右勾手
    {
	    SetServoPosition(4,747,Duosu);
 20e:	40 91 00 01 	lds	r20, 0x0100
 212:	50 91 01 01 	lds	r21, 0x0101
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	6b ee       	ldi	r22, 0xEB	; 235
 21a:	72 e0       	ldi	r23, 0x02	; 2
 21c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(5,345,Duosu);
 220:	40 91 00 01 	lds	r20, 0x0100
 224:	50 91 01 01 	lds	r21, 0x0101
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	69 e5       	ldi	r22, 0x59	; 89
 22c:	71 e0       	ldi	r23, 0x01	; 1
 22e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(6,562,Duosu);
 232:	40 91 00 01 	lds	r20, 0x0100
 236:	50 91 01 01 	lds	r21, 0x0101
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	62 e3       	ldi	r22, 0x32	; 50
 23e:	72 e0       	ldi	r23, 0x02	; 2
 240:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
     }
 244:	08 95       	ret

00000246 <rightqian>:
	  }


void  rightqian()                           //右手前伸
     {
	    SetServoPosition(4,747,Duosu);
 246:	40 91 00 01 	lds	r20, 0x0100
 24a:	50 91 01 01 	lds	r21, 0x0101
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	6b ee       	ldi	r22, 0xEB	; 235
 252:	72 e0       	ldi	r23, 0x02	; 2
 254:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(5,503,Duosu);
 258:	40 91 00 01 	lds	r20, 0x0100
 25c:	50 91 01 01 	lds	r21, 0x0101
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	67 ef       	ldi	r22, 0xF7	; 247
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(6,442,Duosu);
 26a:	40 91 00 01 	lds	r20, 0x0100
 26e:	50 91 01 01 	lds	r21, 0x0101
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	6a eb       	ldi	r22, 0xBA	; 186
 276:	71 e0       	ldi	r23, 0x01	; 1
 278:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	 }
 27c:	08 95       	ret

0000027e <rightgao>:
		SetServoPosition(6,603,Duosu);
	   }

void  rightgao()                            //右手高举
     {
	    SetServoPosition(4,852,Duosu);
 27e:	40 91 00 01 	lds	r20, 0x0100
 282:	50 91 01 01 	lds	r21, 0x0101
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	64 e5       	ldi	r22, 0x54	; 84
 28a:	73 e0       	ldi	r23, 0x03	; 3
 28c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	    SetServoPosition(5,503,Duosu);
 290:	40 91 00 01 	lds	r20, 0x0100
 294:	50 91 01 01 	lds	r21, 0x0101
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	67 ef       	ldi	r22, 0xF7	; 247
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(6,442,Duosu);
 2a2:	40 91 00 01 	lds	r20, 0x0100
 2a6:	50 91 01 01 	lds	r21, 0x0101
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	6a eb       	ldi	r22, 0xBA	; 186
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	  }
 2b4:	08 95       	ret

000002b6 <rightinit>:
		SetServoPosition(6,603,Duosu);
	  }

void   rightinit()                          //右手初始化     
      {
		SetServoPosition(4,600,Duosu);
 2b6:	40 91 00 01 	lds	r20, 0x0100
 2ba:	50 91 01 01 	lds	r21, 0x0101
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	68 e5       	ldi	r22, 0x58	; 88
 2c2:	72 e0       	ldi	r23, 0x02	; 2
 2c4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(5,441,Duosu);
 2c8:	40 91 00 01 	lds	r20, 0x0100
 2cc:	50 91 01 01 	lds	r21, 0x0101
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	69 eb       	ldi	r22, 0xB9	; 185
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(6,603,Duosu);
 2da:	40 91 00 01 	lds	r20, 0x0100
 2de:	50 91 01 01 	lds	r21, 0x0101
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	6b e5       	ldi	r22, 0x5B	; 91
 2e6:	72 e0       	ldi	r23, 0x02	; 2
 2e8:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	   }
 2ec:	08 95       	ret

000002ee <leftrightinit>:
	}	
}

void   leftrightinit()                      //左右手初始化     
      {
		SetServoPosition(1,323,Duosu);
 2ee:	40 91 00 01 	lds	r20, 0x0100
 2f2:	50 91 01 01 	lds	r21, 0x0101
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	63 e4       	ldi	r22, 0x43	; 67
 2fa:	71 e0       	ldi	r23, 0x01	; 1
 2fc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(2,532,Duosu);
 300:	40 91 00 01 	lds	r20, 0x0100
 304:	50 91 01 01 	lds	r21, 0x0101
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	64 e1       	ldi	r22, 0x14	; 20
 30c:	72 e0       	ldi	r23, 0x02	; 2
 30e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(3,314,Duosu);
 312:	40 91 00 01 	lds	r20, 0x0100
 316:	50 91 01 01 	lds	r21, 0x0101
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	6a e3       	ldi	r22, 0x3A	; 58
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(4,600,Duosu);
 324:	40 91 00 01 	lds	r20, 0x0100
 328:	50 91 01 01 	lds	r21, 0x0101
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	68 e5       	ldi	r22, 0x58	; 88
 330:	72 e0       	ldi	r23, 0x02	; 2
 332:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(5,441,Duosu);
 336:	40 91 00 01 	lds	r20, 0x0100
 33a:	50 91 01 01 	lds	r21, 0x0101
 33e:	85 e0       	ldi	r24, 0x05	; 5
 340:	69 eb       	ldi	r22, 0xB9	; 185
 342:	71 e0       	ldi	r23, 0x01	; 1
 344:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
		SetServoPosition(6,603,Duosu);
 348:	40 91 00 01 	lds	r20, 0x0100
 34c:	50 91 01 01 	lds	r21, 0x0101
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	6b e5       	ldi	r22, 0x5B	; 91
 354:	72 e0       	ldi	r23, 0x02	; 2
 356:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetServoPosition>
	  }
 35a:	08 95       	ret

0000035c <main>:
void     yougou(void);
int      Duosu = 600;                   //舵机速度

  
int main(void)                         //主函数
{   
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
    PWM_init();                        //PWM初始化
 362:	0e 94 aa 04 	call	0x954	; 0x954 <PWM_init>
	System_Init();                     //系统初始化
 366:	0e 94 1e 05 	call	0xa3c	; 0xa3c <System_Init>
    DDRA=0XFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	8a bb       	out	0x1a, r24	; 26
	DDRC=0XF0;
 36e:	80 ef       	ldi	r24, 0xF0	; 240
 370:	84 bb       	out	0x14, r24	; 20
	//PORTC = 0XFF;
	unsigned char i,m;
	int l=200,r=200,a=100,b=100;
	cli();                                  //关总中断
 372:	f8 94       	cli
	for(m=1;m<=6;m++)                       //设置6个舵机（1―6）工作模式为舵机模式
    SetServoLimit(m,0,1023);                 
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	4f ef       	ldi	r20, 0xFF	; 255
 37c:	53 e0       	ldi	r21, 0x03	; 3
 37e:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	4f ef       	ldi	r20, 0xFF	; 255
 38a:	53 e0       	ldi	r21, 0x03	; 3
 38c:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	4f ef       	ldi	r20, 0xFF	; 255
 398:	53 e0       	ldi	r21, 0x03	; 3
 39a:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	4f ef       	ldi	r20, 0xFF	; 255
 3a6:	53 e0       	ldi	r21, 0x03	; 3
 3a8:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 3ac:	85 e0       	ldi	r24, 0x05	; 5
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	4f ef       	ldi	r20, 0xFF	; 255
 3b4:	53 e0       	ldi	r21, 0x03	; 3
 3b6:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	4f ef       	ldi	r20, 0xFF	; 255
 3c2:	53 e0       	ldi	r21, 0x03	; 3
 3c4:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 3c8:	8c e2       	ldi	r24, 0x2C	; 44
 3ca:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3cc:	20 e9       	ldi	r18, 0x90	; 144
 3ce:	31 e0       	ldi	r19, 0x01	; 1
 3d0:	f9 01       	movw	r30, r18
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <main+0x74>
	_delay_ms(30);  
	for(m=1;m<=6;m++)  
	SetServoLimit(m,0,1023);    
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	4f ef       	ldi	r20, 0xFF	; 255
 3e2:	53 e0       	ldi	r21, 0x03	; 3
 3e4:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	4f ef       	ldi	r20, 0xFF	; 255
 3f0:	53 e0       	ldi	r21, 0x03	; 3
 3f2:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	4f ef       	ldi	r20, 0xFF	; 255
 3fe:	53 e0       	ldi	r21, 0x03	; 3
 400:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	4f ef       	ldi	r20, 0xFF	; 255
 40c:	53 e0       	ldi	r21, 0x03	; 3
 40e:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 412:	85 e0       	ldi	r24, 0x05	; 5
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	4f ef       	ldi	r20, 0xFF	; 255
 41a:	53 e0       	ldi	r21, 0x03	; 3
 41c:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	4f ef       	ldi	r20, 0xFF	; 255
 428:	53 e0       	ldi	r21, 0x03	; 3
 42a:	0e 94 03 03 	call	0x606	; 0x606 <SetServoLimit>
 42e:	8c e2       	ldi	r24, 0x2C	; 44
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	20 e9       	ldi	r18, 0x90	; 144
 434:	31 e0       	ldi	r19, 0x01	; 1
 436:	f9 01       	movw	r30, r18
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43e:	d9 f7       	brne	.-10     	; 0x436 <main+0xda>
	_delay_ms(30);                                     
	leftrightinit();                        //左右手初始化（重复，保证信号传输准确性）
 440:	0e 94 77 01 	call	0x2ee	; 0x2ee <leftrightinit>
 444:	8c e2       	ldi	r24, 0x2C	; 44
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	20 e9       	ldi	r18, 0x90	; 144
 44a:	31 e0       	ldi	r19, 0x01	; 1
 44c:	f9 01       	movw	r30, r18
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <main+0xf2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 452:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 454:	d9 f7       	brne	.-10     	; 0x44c <main+0xf0>
	_delay_ms(30);   
	leftrightinit();  
 456:	0e 94 77 01 	call	0x2ee	; 0x2ee <leftrightinit>
 45a:	8c e2       	ldi	r24, 0x2C	; 44
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	20 e9       	ldi	r18, 0x90	; 144
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	f9 01       	movw	r30, r18
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 468:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46a:	d9 f7       	brne	.-10     	; 0x462 <main+0x106>
	_delay_ms(30);
	leftrightinit();             
 46c:	0e 94 77 01 	call	0x2ee	; 0x2ee <leftrightinit>
 470:	84 ef       	ldi	r24, 0xF4	; 244
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	20 e9       	ldi	r18, 0x90	; 144
 476:	31 e0       	ldi	r19, 0x01	; 1
 478:	f9 01       	movw	r30, r18
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <main+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d9 f7       	brne	.-10     	; 0x478 <main+0x11c>
 482:	c0 e9       	ldi	r28, 0x90	; 144
 484:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(50);
	while(1)                               //循环判断上位机发送的指令信号
	{   
		i=USART1_recieve();                //串口1接收上位机指令信号    
 486:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <USART1_recieve>
 48a:	18 2f       	mov	r17, r24
		switch(i)                          //判断
 48c:	89 33       	cpi	r24, 0x39	; 57
 48e:	09 f4       	brne	.+2      	; 0x492 <main+0x136>
 490:	94 c0       	rjmp	.+296    	; 0x5ba <main+0x25e>
 492:	8a 33       	cpi	r24, 0x3A	; 58
 494:	c8 f4       	brcc	.+50     	; 0x4c8 <main+0x16c>
 496:	83 33       	cpi	r24, 0x33	; 51
 498:	09 f4       	brne	.+2      	; 0x49c <main+0x140>
 49a:	5f c0       	rjmp	.+190    	; 0x55a <main+0x1fe>
 49c:	84 33       	cpi	r24, 0x34	; 52
 49e:	50 f4       	brcc	.+20     	; 0x4b4 <main+0x158>
 4a0:	81 33       	cpi	r24, 0x31	; 49
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <main+0x14a>
 4a4:	3e c0       	rjmp	.+124    	; 0x522 <main+0x1c6>
 4a6:	82 33       	cpi	r24, 0x32	; 50
 4a8:	08 f0       	brcs	.+2      	; 0x4ac <main+0x150>
 4aa:	49 c0       	rjmp	.+146    	; 0x53e <main+0x1e2>
 4ac:	80 33       	cpi	r24, 0x30	; 48
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <main+0x156>
 4b0:	a1 c0       	rjmp	.+322    	; 0x5f4 <main+0x298>
 4b2:	29 c0       	rjmp	.+82     	; 0x506 <main+0x1aa>
 4b4:	85 33       	cpi	r24, 0x35	; 53
 4b6:	09 f4       	brne	.+2      	; 0x4ba <main+0x15e>
 4b8:	83 c0       	rjmp	.+262    	; 0x5c0 <main+0x264>
 4ba:	85 33       	cpi	r24, 0x35	; 53
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <main+0x164>
 4be:	5b c0       	rjmp	.+182    	; 0x576 <main+0x21a>
 4c0:	87 33       	cpi	r24, 0x37	; 55
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <main+0x16a>
 4c4:	97 c0       	rjmp	.+302    	; 0x5f4 <main+0x298>
 4c6:	85 c0       	rjmp	.+266    	; 0x5d2 <main+0x276>
 4c8:	87 36       	cpi	r24, 0x67	; 103
 4ca:	09 f4       	brne	.+2      	; 0x4ce <main+0x172>
 4cc:	91 c0       	rjmp	.+290    	; 0x5f0 <main+0x294>
 4ce:	88 36       	cpi	r24, 0x68	; 104
 4d0:	50 f4       	brcc	.+20     	; 0x4e6 <main+0x18a>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	09 f4       	brne	.+2      	; 0x4d8 <main+0x17c>
 4d6:	89 c0       	rjmp	.+274    	; 0x5ea <main+0x28e>
 4d8:	85 36       	cpi	r24, 0x65	; 101
 4da:	09 f4       	brne	.+2      	; 0x4de <main+0x182>
 4dc:	80 c0       	rjmp	.+256    	; 0x5de <main+0x282>
 4de:	81 36       	cpi	r24, 0x61	; 97
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <main+0x188>
 4e2:	88 c0       	rjmp	.+272    	; 0x5f4 <main+0x298>
 4e4:	73 c0       	rjmp	.+230    	; 0x5cc <main+0x270>
 4e6:	8a 36       	cpi	r24, 0x6A	; 106
 4e8:	09 f4       	brne	.+2      	; 0x4ec <main+0x190>
 4ea:	6d c0       	rjmp	.+218    	; 0x5c6 <main+0x26a>
 4ec:	8b 36       	cpi	r24, 0x6B	; 107
 4ee:	20 f4       	brcc	.+8      	; 0x4f8 <main+0x19c>
 4f0:	89 36       	cpi	r24, 0x69	; 105
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <main+0x19a>
 4f4:	7f c0       	rjmp	.+254    	; 0x5f4 <main+0x298>
 4f6:	70 c0       	rjmp	.+224    	; 0x5d8 <main+0x27c>
 4f8:	8d 36       	cpi	r24, 0x6D	; 109
 4fa:	09 f4       	brne	.+2      	; 0x4fe <main+0x1a2>
 4fc:	73 c0       	rjmp	.+230    	; 0x5e4 <main+0x288>
 4fe:	80 37       	cpi	r24, 0x70	; 112
 500:	09 f0       	breq	.+2      	; 0x504 <main+0x1a8>
 502:	78 c0       	rjmp	.+240    	; 0x5f4 <main+0x298>
 504:	46 c0       	rjmp	.+140    	; 0x592 <main+0x236>
		{     
			case '0': move(120,120);   _delay_ms(70);move(0,0);break;          //电机
 506:	88 e7       	ldi	r24, 0x78	; 120
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	68 e7       	ldi	r22, 0x78	; 120
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 512:	8c eb       	ldi	r24, 0xBC	; 188
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	fe 01       	movw	r30, r28
 518:	31 97       	sbiw	r30, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <main+0x1bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 51c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 51e:	d9 f7       	brne	.-10     	; 0x516 <main+0x1ba>
 520:	45 c0       	rjmp	.+138    	; 0x5ac <main+0x250>
			case '1': move(-120,-120); _delay_ms(70);move(0,0);break;
 522:	88 e8       	ldi	r24, 0x88	; 136
 524:	9f ef       	ldi	r25, 0xFF	; 255
 526:	68 e8       	ldi	r22, 0x88	; 136
 528:	7f ef       	ldi	r23, 0xFF	; 255
 52a:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 52e:	8c eb       	ldi	r24, 0xBC	; 188
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	fe 01       	movw	r30, r28
 534:	31 97       	sbiw	r30, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <main+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 538:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 53a:	d9 f7       	brne	.-10     	; 0x532 <main+0x1d6>
 53c:	37 c0       	rjmp	.+110    	; 0x5ac <main+0x250>
			case '2': move(-120,120);  _delay_ms(60);move(0,0);break;
 53e:	88 e8       	ldi	r24, 0x88	; 136
 540:	9f ef       	ldi	r25, 0xFF	; 255
 542:	68 e7       	ldi	r22, 0x78	; 120
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 54a:	88 e5       	ldi	r24, 0x58	; 88
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	fe 01       	movw	r30, r28
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <main+0x1f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 554:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 556:	d9 f7       	brne	.-10     	; 0x54e <main+0x1f2>
 558:	29 c0       	rjmp	.+82     	; 0x5ac <main+0x250>
			case '3': move(120,-120);  _delay_ms(60);move(0,0);break;
 55a:	88 e7       	ldi	r24, 0x78	; 120
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	68 e8       	ldi	r22, 0x88	; 136
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 566:	88 e5       	ldi	r24, 0x58	; 88
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	fe 01       	movw	r30, r28
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <main+0x210>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 570:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 572:	d9 f7       	brne	.-10     	; 0x56a <main+0x20e>
 574:	1b c0       	rjmp	.+54     	; 0x5ac <main+0x250>
			case '4': move(220,220);   _delay_ms(70);move(0,0);break;
 576:	8c ed       	ldi	r24, 0xDC	; 220
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	6c ed       	ldi	r22, 0xDC	; 220
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 582:	8c eb       	ldi	r24, 0xBC	; 188
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	fe 01       	movw	r30, r28
 588:	31 97       	sbiw	r30, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <main+0x22c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 58c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58e:	d9 f7       	brne	.-10     	; 0x586 <main+0x22a>
 590:	0d c0       	rjmp	.+26     	; 0x5ac <main+0x250>
			case 'p': move(-170,-170); _delay_ms(70);move(0,0);break;
 592:	86 e5       	ldi	r24, 0x56	; 86
 594:	9f ef       	ldi	r25, 0xFF	; 255
 596:	66 e5       	ldi	r22, 0x56	; 86
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 59e:	8c eb       	ldi	r24, 0xBC	; 188
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	fe 01       	movw	r30, r28
 5a4:	31 97       	sbiw	r30, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x248>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5aa:	d9 f7       	brne	.-10     	; 0x5a2 <main+0x246>
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	0e 94 ba 04 	call	0x974	; 0x974 <move>
 5b8:	1d c0       	rjmp	.+58     	; 0x5f4 <main+0x298>

		    
			case '9': rightinit(); break;    //右手初始化                        //舵机
 5ba:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <rightinit>
 5be:	1a c0       	rjmp	.+52     	; 0x5f4 <main+0x298>
			case '5': rightgao();  break;    //右手高举
 5c0:	0e 94 3f 01 	call	0x27e	; 0x27e <rightgao>
 5c4:	17 c0       	rjmp	.+46     	; 0x5f4 <main+0x298>
			case 'j': rightqian(); break;    //右手前伸
 5c6:	0e 94 23 01 	call	0x246	; 0x246 <rightqian>
 5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <main+0x298>
            case 'a': rightgou();  break;    //右勾手
 5cc:	0e 94 07 01 	call	0x20e	; 0x20e <rightgou>
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <main+0x298>
			case '7': rightxia();  break;    //右下
 5d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <rightxia>
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <main+0x298>
	    	
			case 'i': leftinit(); break;     //左手初始化
 5d8:	0e 94 cf 00 	call	0x19e	; 0x19e <leftinit>
 5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <main+0x298>
			case 'e': leftgao();  break;     //左手高举
 5de:	0e 94 b3 00 	call	0x166	; 0x166 <leftgao>
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <main+0x298>
			case 'm': leftqian(); break;     //左手前伸
 5e4:	0e 94 97 00 	call	0x12e	; 0x12e <leftqian>
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <main+0x298>
			case 'b': leftgou();  break;     //左勾手
 5ea:	0e 94 7b 00 	call	0xf6	; 0xf6 <leftgou>
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <main+0x298>
			case 'g': leftxia();  break;     //左下
 5f0:	0e 94 5f 00 	call	0xbe	; 0xbe <leftxia>
			default : break;
		}
		USART1_send(i);  
 5f4:	81 2f       	mov	r24, r17
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <USART1_send>
 5fc:	44 cf       	rjmp	.-376    	; 0x486 <main+0x12a>

000005fe <SendUart0Byte>:
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 5fe:	5d 9b       	sbis	0x0b, 5	; 11
 600:	fe cf       	rjmp	.-4      	; 0x5fe <SendUart0Byte>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 602:	8c b9       	out	0x0c, r24	; 12

 }
 604:	08 95       	ret

00000606 <SetServoLimit>:

void SetServoLimit(unsigned char id, unsigned short int cw_limit, unsigned short int ccw_limit)
 {
 606:	e8 2f       	mov	r30, r24
 608:	84 e0       	ldi	r24, 0x04	; 4
 60a:	40 30       	cpi	r20, 0x00	; 0
 60c:	58 07       	cpc	r21, r24
 60e:	10 f0       	brcs	.+4      	; 0x614 <SetServoLimit+0xe>
 610:	4f ef       	ldi	r20, 0xFF	; 255
 612:	53 e0       	ldi	r21, 0x03	; 3
 614:	9b 01       	movw	r18, r22
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	60 30       	cpi	r22, 0x00	; 0
 61a:	78 07       	cpc	r23, r24
 61c:	10 f0       	brcs	.+4      	; 0x622 <SetServoLimit+0x1c>
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	33 e0       	ldi	r19, 0x03	; 3
     else
	    {
		 temp_cw = cw_limit;
	    }

     temp_ccw_h = (unsigned char)(temp_ccw >> 8);
 622:	65 2f       	mov	r22, r21
     temp_ccw_l = (unsigned char)temp_ccw; // 将16bit数据拆为2个8bit数据 // (split 16 bits to 2 bytes)
 624:	94 2f       	mov	r25, r20
	 temp_cw_h = (unsigned char)(temp_cw >> 8);
 626:	43 2f       	mov	r20, r19
	 temp_cw_l = (unsigned char)temp_cw; // 将16bit数据拆为2个8bit数据 // (split 16 bits to 2 bytes)
	 PORTG &= ~_BV(PG4);
 628:	80 91 65 00 	lds	r24, 0x0065
 62c:	8f 7e       	andi	r24, 0xEF	; 239
 62e:	80 93 65 00 	sts	0x0065, r24
	 PORTG |= _BV(PG3); // 使总线处于主机发送状态 // (Set the bus to host transmit state)
 632:	80 91 65 00 	lds	r24, 0x0065
 636:	88 60       	ori	r24, 0x08	; 8
 638:	80 93 65 00 	sts	0x0065, r24
	 UCSR0A |= (1<<TXC0); // 清除UART0写完成标志 // (Clear written flag of UART0)
 63c:	5e 9a       	sbi	0x0b, 6	; 11
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 63e:	5d 9b       	sbis	0x0b, 5	; 11
 640:	fe cf       	rjmp	.-4      	; 0x63e <SetServoLimit+0x38>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 646:	5d 9b       	sbis	0x0b, 5	; 11
 648:	fe cf       	rjmp	.-4      	; 0x646 <SetServoLimit+0x40>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 64e:	5d 9b       	sbis	0x0b, 5	; 11
 650:	fe cf       	rjmp	.-4      	; 0x64e <SetServoLimit+0x48>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 652:	ec b9       	out	0x0c, r30	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 654:	5d 9b       	sbis	0x0b, 5	; 11
 656:	fe cf       	rjmp	.-4      	; 0x654 <SetServoLimit+0x4e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 658:	87 e0       	ldi	r24, 0x07	; 7
 65a:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 65c:	5d 9b       	sbis	0x0b, 5	; 11
 65e:	fe cf       	rjmp	.-4      	; 0x65c <SetServoLimit+0x56>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 664:	5d 9b       	sbis	0x0b, 5	; 11
 666:	fe cf       	rjmp	.-4      	; 0x664 <SetServoLimit+0x5e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 66c:	5d 9b       	sbis	0x0b, 5	; 11
 66e:	fe cf       	rjmp	.-4      	; 0x66c <SetServoLimit+0x66>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 670:	2c b9       	out	0x0c, r18	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 672:	5d 9b       	sbis	0x0b, 5	; 11
 674:	fe cf       	rjmp	.-4      	; 0x672 <SetServoLimit+0x6c>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 676:	4c b9       	out	0x0c, r20	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 678:	5d 9b       	sbis	0x0b, 5	; 11
 67a:	fe cf       	rjmp	.-4      	; 0x678 <SetServoLimit+0x72>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 67c:	9c b9       	out	0x0c, r25	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 67e:	5d 9b       	sbis	0x0b, 5	; 11
 680:	fe cf       	rjmp	.-4      	; 0x67e <SetServoLimit+0x78>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 682:	6c b9       	out	0x0c, r22	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 684:	5d 9b       	sbis	0x0b, 5	; 11
 686:	fe cf       	rjmp	.-4      	; 0x684 <SetServoLimit+0x7e>
	 SendUart0Byte(0x06); // 舵机控制寄存器首地址 // (Send the start address of control rigister)
	 SendUart0Byte(temp_cw_l); // 发送顺时针位置限制低位
	 SendUart0Byte(temp_cw_h); // 发送顺时针位置限制高位 //(Send the high byte of clockwise position limit)
	 SendUart0Byte(temp_ccw_l); // 发送逆时针位置限制低位 // (Send the low byte of counterclockwise position limit)
	 SendUart0Byte(temp_ccw_h); // 发送逆时针位置限制高位 // (Send the low byte of counterclockwise position limit)
	 temp_sum = id + 7 + 0x03 + 0x06 + temp_cw_l + temp_cw_h + temp_ccw_l + temp_ccw_h;
 688:	e0 5f       	subi	r30, 0xF0	; 240
 68a:	e2 0f       	add	r30, r18
 68c:	e9 0f       	add	r30, r25
 68e:	e4 0f       	add	r30, r20
 690:	e6 0f       	add	r30, r22
	 temp_sum = ~temp_sum; // 计算校验和 // (Calculate the checksum)
 692:	e0 95       	com	r30
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 694:	ec b9       	out	0x0c, r30	; 12
	 SendUart0Byte(temp_ccw_l); // 发送逆时针位置限制低位 // (Send the low byte of counterclockwise position limit)
	 SendUart0Byte(temp_ccw_h); // 发送逆时针位置限制高位 // (Send the low byte of counterclockwise position limit)
	 temp_sum = id + 7 + 0x03 + 0x06 + temp_cw_l + temp_cw_h + temp_ccw_l + temp_ccw_h;
	 temp_sum = ~temp_sum; // 计算校验和 // (Calculate the checksum)
	 SendUart0Byte(temp_sum); // 发送校验和 // (Send checksum)
	 while ( !( UCSR0A & (1<<TXC0)) ); // 等待发送完成
 696:	5e 9b       	sbis	0x0b, 6	; 11
 698:	fe cf       	rjmp	.-4      	; 0x696 <SetServoLimit+0x90>

	 PORTG |= _BV(PG4);
 69a:	80 91 65 00 	lds	r24, 0x0065
 69e:	80 61       	ori	r24, 0x10	; 16
 6a0:	80 93 65 00 	sts	0x0065, r24

	 PORTG &= ~_BV(PG3);  // 使总线处于主机接收状态 // (Set the UART bus to host receiving state)
 6a4:	80 91 65 00 	lds	r24, 0x0065
 6a8:	87 7f       	andi	r24, 0xF7	; 247
 6aa:	80 93 65 00 	sts	0x0065, r24
 6ae:	80 e4       	ldi	r24, 0x40	; 64
 6b0:	9f e1       	ldi	r25, 0x1F	; 31
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <SetServoLimit+0xac>
	 _delay_ms(2);        //送完成后，总线会被从机占用，反馈应答数据，所以进行延时
					               // (The bus will be overrode by slave after finishing sending
								   // to receive the answer, so here delays 2 ms.)

}
 6b6:	08 95       	ret

000006b8 <SetServoPosition>:




void SetServoPosition(unsigned char id, unsigned short int position, unsigned short int velocity)
{
 6b8:	e8 2f       	mov	r30, r24
 6ba:	84 e0       	ldi	r24, 0x04	; 4
 6bc:	40 30       	cpi	r20, 0x00	; 0
 6be:	58 07       	cpc	r21, r24
 6c0:	10 f0       	brcs	.+4      	; 0x6c6 <SetServoPosition+0xe>
 6c2:	4f ef       	ldi	r20, 0xFF	; 255
 6c4:	53 e0       	ldi	r21, 0x03	; 3
 6c6:	9b 01       	movw	r18, r22
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	60 30       	cpi	r22, 0x00	; 0
 6cc:	78 07       	cpc	r23, r24
 6ce:	10 f0       	brcs	.+4      	; 0x6d4 <SetServoPosition+0x1c>
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	33 e0       	ldi	r19, 0x03	; 3
   else
   {
   temp_position = position;
   }

   temp_velocity_h = (unsigned char)(temp_velocity >> 8); // 将16bit数据拆为2个8bit数据 // (split 16 bits to 2 bytes)
 6d4:	65 2f       	mov	r22, r21
   temp_velocity_l = (unsigned char)temp_velocity;
 6d6:	94 2f       	mov	r25, r20
   temp_position_h = (unsigned char)(temp_position >> 8); // 将16bit数据拆为2个8bit数据 // (split 16 bits to 2 bytes)
 6d8:	43 2f       	mov	r20, r19
   temp_position_l = (unsigned char)temp_position;
   PORTG &= ~_BV(PG4);
 6da:	80 91 65 00 	lds	r24, 0x0065
 6de:	8f 7e       	andi	r24, 0xEF	; 239
 6e0:	80 93 65 00 	sts	0x0065, r24
   	 PORTG |= _BV(PG3); // 使总线处于主机发送状态 // (Set the bus to host transmit state)
 6e4:	80 91 65 00 	lds	r24, 0x0065
 6e8:	88 60       	ori	r24, 0x08	; 8
 6ea:	80 93 65 00 	sts	0x0065, r24
   UCSR0A |= (1<<TXC0); // 清除UART0写完成标志 // (Clear written flag of UART0)
 6ee:	5e 9a       	sbi	0x0b, 6	; 11
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 6f0:	5d 9b       	sbis	0x0b, 5	; 11
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <SetServoPosition+0x38>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 6f8:	5d 9b       	sbis	0x0b, 5	; 11
 6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <SetServoPosition+0x40>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 700:	5d 9b       	sbis	0x0b, 5	; 11
 702:	fe cf       	rjmp	.-4      	; 0x700 <SetServoPosition+0x48>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 704:	ec b9       	out	0x0c, r30	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 706:	5d 9b       	sbis	0x0b, 5	; 11
 708:	fe cf       	rjmp	.-4      	; 0x706 <SetServoPosition+0x4e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 70a:	87 e0       	ldi	r24, 0x07	; 7
 70c:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 70e:	5d 9b       	sbis	0x0b, 5	; 11
 710:	fe cf       	rjmp	.-4      	; 0x70e <SetServoPosition+0x56>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 716:	5d 9b       	sbis	0x0b, 5	; 11
 718:	fe cf       	rjmp	.-4      	; 0x716 <SetServoPosition+0x5e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 71a:	8e e1       	ldi	r24, 0x1E	; 30
 71c:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 71e:	5d 9b       	sbis	0x0b, 5	; 11
 720:	fe cf       	rjmp	.-4      	; 0x71e <SetServoPosition+0x66>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 722:	2c b9       	out	0x0c, r18	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 724:	5d 9b       	sbis	0x0b, 5	; 11
 726:	fe cf       	rjmp	.-4      	; 0x724 <SetServoPosition+0x6c>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 728:	4c b9       	out	0x0c, r20	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 72a:	5d 9b       	sbis	0x0b, 5	; 11
 72c:	fe cf       	rjmp	.-4      	; 0x72a <SetServoPosition+0x72>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 72e:	9c b9       	out	0x0c, r25	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 730:	5d 9b       	sbis	0x0b, 5	; 11
 732:	fe cf       	rjmp	.-4      	; 0x730 <SetServoPosition+0x78>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 734:	6c b9       	out	0x0c, r22	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 736:	5d 9b       	sbis	0x0b, 5	; 11
 738:	fe cf       	rjmp	.-4      	; 0x736 <SetServoPosition+0x7e>
   SendUart0Byte(0x1E); // 舵机控制寄存器首地址 // (Send the start address of control register)
   SendUart0Byte(temp_position_l); // 发送速度数据低位 // (Send the low byte of velocity)
   SendUart0Byte(temp_position_h); // 发送速度数据高位 // (Send the high byte of velocity)
   SendUart0Byte(temp_velocity_l); //发送位置低字节 // (Send the low byte of position)
   SendUart0Byte(temp_velocity_h); // 发送位置高字节 // (Send the high byte of position)
   temp_sum = id + 7 + 0x03 + 0x1E + temp_position_l + temp_position_h + temp_velocity_l + temp_velocity_h;
 73a:	e8 5d       	subi	r30, 0xD8	; 216
 73c:	e2 0f       	add	r30, r18
 73e:	e9 0f       	add	r30, r25
 740:	e4 0f       	add	r30, r20
 742:	e6 0f       	add	r30, r22
   temp_sum = ~temp_sum; // 计算校验和
 744:	e0 95       	com	r30
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 746:	ec b9       	out	0x0c, r30	; 12
   SendUart0Byte(temp_velocity_l); //发送位置低字节 // (Send the low byte of position)
   SendUart0Byte(temp_velocity_h); // 发送位置高字节 // (Send the high byte of position)
   temp_sum = id + 7 + 0x03 + 0x1E + temp_position_l + temp_position_h + temp_velocity_l + temp_velocity_h;
   temp_sum = ~temp_sum; // 计算校验和
   SendUart0Byte(temp_sum); // 发送校验和 (Send the checksum)
   while ( !( UCSR0A & (1<<TXC0)) ) // 等待发送完成
 748:	5e 9b       	sbis	0x0b, 6	; 11
 74a:	fe cf       	rjmp	.-4      	; 0x748 <SetServoPosition+0x90>
   {
                 // (Waiting for finishing sending)
   ;
   }
   PORTG |= _BV(PG4);
 74c:	80 91 65 00 	lds	r24, 0x0065
 750:	80 61       	ori	r24, 0x10	; 16
 752:	80 93 65 00 	sts	0x0065, r24

  	 PORTG &= ~_BV(PG3);  // 使总线处于主机接收状态 // (Set the UART bus to host receiving state)
 756:	80 91 65 00 	lds	r24, 0x0065
 75a:	87 7f       	andi	r24, 0xF7	; 247
 75c:	80 93 65 00 	sts	0x0065, r24
 760:	80 e4       	ldi	r24, 0x40	; 64
 762:	9f e1       	ldi	r25, 0x1F	; 31
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	f1 f7       	brne	.-4      	; 0x764 <SetServoPosition+0xac>
   _delay_ms(2); // 发送完成后，总线会被从机占用，反馈应答数据，所以进行延时
                 // (The bus will be overrode by slave after finishing sending
				 // to receive the answer, so here delays 2 ms.)

}
 768:	08 95       	ret

0000076a <Action_write>:

void Action_write(unsigned char id,unsigned short int position,unsigned short int velocity)
{
 76a:	98 2f       	mov	r25, r24
	temp_position=position;
	temp_velocity_h=(unsigned char)(temp_velocity>>8);
	temp_velocity_l=(unsigned char)temp_velocity;
	temp_position_h=(unsigned char)(temp_position>>8);
	temp_position_l=(unsigned char)temp_position;
	 PORTG &= ~_BV(PG4); 
 76c:	80 91 65 00 	lds	r24, 0x0065
 770:	8f 7e       	andi	r24, 0xEF	; 239
 772:	80 93 65 00 	sts	0x0065, r24
    PORTG |= _BV(PG3); // 使总线处于主机发送状态 
 776:	80 91 65 00 	lds	r24, 0x0065
 77a:	88 60       	ori	r24, 0x08	; 8
 77c:	80 93 65 00 	sts	0x0065, r24

    UCSR0A |= (1<<TXC0); // 清除UART0写完成标志 
 780:	5e 9a       	sbi	0x0b, 6	; 11
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 782:	5d 9b       	sbis	0x0b, 5	; 11
 784:	fe cf       	rjmp	.-4      	; 0x782 <Action_write+0x18>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 78a:	5d 9b       	sbis	0x0b, 5	; 11
 78c:	fe cf       	rjmp	.-4      	; 0x78a <Action_write+0x20>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 792:	5d 9b       	sbis	0x0b, 5	; 11
 794:	fe cf       	rjmp	.-4      	; 0x792 <Action_write+0x28>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 796:	9c b9       	out	0x0c, r25	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 798:	5d 9b       	sbis	0x0b, 5	; 11
 79a:	fe cf       	rjmp	.-4      	; 0x798 <Action_write+0x2e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 79c:	87 e0       	ldi	r24, 0x07	; 7
 79e:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7a0:	5d 9b       	sbis	0x0b, 5	; 11
 7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <Action_write+0x36>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7a4:	84 e0       	ldi	r24, 0x04	; 4
 7a6:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7a8:	5d 9b       	sbis	0x0b, 5	; 11
 7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <Action_write+0x3e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7ac:	8e e1       	ldi	r24, 0x1E	; 30
 7ae:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7b0:	5d 9b       	sbis	0x0b, 5	; 11
 7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <Action_write+0x46>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7b4:	6c b9       	out	0x0c, r22	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7b6:	5d 9b       	sbis	0x0b, 5	; 11
 7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <Action_write+0x4c>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7ba:	7c b9       	out	0x0c, r23	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7bc:	5d 9b       	sbis	0x0b, 5	; 11
 7be:	fe cf       	rjmp	.-4      	; 0x7bc <Action_write+0x52>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7c0:	4c b9       	out	0x0c, r20	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7c2:	5d 9b       	sbis	0x0b, 5	; 11
 7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <Action_write+0x58>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7c6:	5c b9       	out	0x0c, r21	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 7c8:	5d 9b       	sbis	0x0b, 5	; 11
 7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <Action_write+0x5e>
	SendUart0Byte(0x1E);
	SendUart0Byte(temp_position_l);
	SendUart0Byte(temp_position_h);
	SendUart0Byte(temp_velocity_l);
	SendUart0Byte(temp_velocity_h);
	temp_sum=id+ 7 + 0x04 + 0x1e + temp_position_l + temp_position_h + temp_velocity_l + temp_velocity_h;
 7cc:	97 5d       	subi	r25, 0xD7	; 215
 7ce:	96 0f       	add	r25, r22
 7d0:	94 0f       	add	r25, r20
 7d2:	97 0f       	add	r25, r23
 7d4:	95 0f       	add	r25, r21
	temp_sum=~temp_sum;
 7d6:	90 95       	com	r25
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 7d8:	9c b9       	out	0x0c, r25	; 12
	SendUart0Byte(temp_velocity_h);
	temp_sum=id+ 7 + 0x04 + 0x1e + temp_position_l + temp_position_h + temp_velocity_l + temp_velocity_h;
	temp_sum=~temp_sum;
	SendUart0Byte(temp_sum);
	
	 while ( !( UCSR0A & (1<<TXC0)) ) // 等待发送完成 
 7da:	5e 9b       	sbis	0x0b, 6	; 11
 7dc:	fe cf       	rjmp	.-4      	; 0x7da <Action_write+0x70>
{ 
; 
} 
PORTG &=~_BV(PG3);
 7de:	80 91 65 00 	lds	r24, 0x0065
 7e2:	87 7f       	andi	r24, 0xF7	; 247
 7e4:	80 93 65 00 	sts	0x0065, r24
PORTG |=_BV(PG4); // 使总线处于主机接收状态 
 7e8:	80 91 65 00 	lds	r24, 0x0065
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	80 93 65 00 	sts	0x0065, r24
 7f2:	80 e4       	ldi	r24, 0x40	; 64
 7f4:	9f e1       	ldi	r25, 0x1F	; 31
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <Action_write+0x8c>
_delay_ms(2);
}
 7fa:	08 95       	ret

000007fc <Action>:
void Action()
{
	unsigned char temp_sum=0;
    PORTG &= ~_BV(PG4); 
 7fc:	80 91 65 00 	lds	r24, 0x0065
 800:	8f 7e       	andi	r24, 0xEF	; 239
 802:	80 93 65 00 	sts	0x0065, r24
    PORTG |= _BV(PG3); // 使总线处于主机发送状态 
 806:	80 91 65 00 	lds	r24, 0x0065
 80a:	88 60       	ori	r24, 0x08	; 8
 80c:	80 93 65 00 	sts	0x0065, r24

    UCSR0A |= (1<<TXC0); // 清除UART0写完成标志 	
 810:	5e 9a       	sbi	0x0b, 6	; 11
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 812:	5d 9b       	sbis	0x0b, 5	; 11
 814:	fe cf       	rjmp	.-4      	; 0x812 <Action+0x16>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 81a:	5d 9b       	sbis	0x0b, 5	; 11
 81c:	fe cf       	rjmp	.-4      	; 0x81a <Action+0x1e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 822:	5d 9b       	sbis	0x0b, 5	; 11
 824:	fe cf       	rjmp	.-4      	; 0x822 <Action+0x26>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 826:	8e ef       	ldi	r24, 0xFE	; 254
 828:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 82a:	5d 9b       	sbis	0x0b, 5	; 11
 82c:	fe cf       	rjmp	.-4      	; 0x82a <Action+0x2e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 832:	5d 9b       	sbis	0x0b, 5	; 11
 834:	fe cf       	rjmp	.-4      	; 0x832 <Action+0x36>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 836:	85 e0       	ldi	r24, 0x05	; 5
 838:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 83a:	5d 9b       	sbis	0x0b, 5	; 11
 83c:	fe cf       	rjmp	.-4      	; 0x83a <Action+0x3e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 83e:	8a ef       	ldi	r24, 0xFA	; 250
 840:	8c b9       	out	0x0c, r24	; 12
	SendUart0Byte(0x05);
	temp_sum=0xFE + 0x02 + 0x05;
	temp_sum=~temp_sum;
	SendUart0Byte(temp_sum);
	
	 while ( !( UCSR0A & (1<<TXC0)) ) // 等待发送完成 
 842:	5e 9b       	sbis	0x0b, 6	; 11
 844:	fe cf       	rjmp	.-4      	; 0x842 <Action+0x46>
{ 
; 
} 
PORTG &=~_BV(PG3);
 846:	80 91 65 00 	lds	r24, 0x0065
 84a:	87 7f       	andi	r24, 0xF7	; 247
 84c:	80 93 65 00 	sts	0x0065, r24
PORTG |=_BV(PG4); // 使总线处于主机接收状态 
 850:	80 91 65 00 	lds	r24, 0x0065
 854:	80 61       	ori	r24, 0x10	; 16
 856:	80 93 65 00 	sts	0x0065, r24
 85a:	80 e4       	ldi	r24, 0x40	; 64
 85c:	9f e1       	ldi	r25, 0x1F	; 31
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <Action+0x62>
_delay_ms(2);
}
 862:	08 95       	ret

00000864 <SetServoVelocity>:


void SetServoVelocity(unsigned char id, signed short int velocity)
{
 864:	48 2f       	mov	r20, r24
     unsigned char temp_sign = 0; // 临时符号，用于进行方向判别 // (temp variable to judge the direction)
	 unsigned short int temp_velocity = 0; // 临时速度，用于进行方向判别 // (temp velocity to judge the direction)
	 unsigned char temp_value_h = 0; // 待发送数据h位 // (h bits to send)
	 unsigned char temp_value_l = 0; // 待发送数据l位 // (l bits to send)
	 unsigned char temp_sum = 0; // 校验和寄存变量 // (temp variable to save checksum)
	 if (velocity < 0)
 866:	77 ff       	sbrs	r23, 7
 868:	06 c0       	rjmp	.+12     	; 0x876 <SetServoVelocity+0x12>
	 { temp_velocity = -velocity; // 如果为负数，则取绝对值 // (if negative, get the absolute value)
 86a:	88 27       	eor	r24, r24
 86c:	99 27       	eor	r25, r25
 86e:	86 1b       	sub	r24, r22
 870:	97 0b       	sbc	r25, r23
 872:	51 e0       	ldi	r21, 0x01	; 1
 874:	02 c0       	rjmp	.+4      	; 0x87a <SetServoVelocity+0x16>
	 temp_sign = 1; // 设置负数符号标志 // (Set negative flag)
	 }
	 else
	 {
	 temp_velocity = velocity;
 876:	cb 01       	movw	r24, r22
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	9c 01       	movw	r18, r24
 87c:	84 e0       	ldi	r24, 0x04	; 4
 87e:	20 30       	cpi	r18, 0x00	; 0
 880:	38 07       	cpc	r19, r24
 882:	10 f0       	brcs	.+4      	; 0x888 <SetServoVelocity+0x24>
 884:	2f ef       	ldi	r18, 0xFF	; 255
 886:	33 e0       	ldi	r19, 0x03	; 3
	 if (temp_velocity > 1023)
	 {
	 temp_velocity = 1023; // 限制速度值在可用范围内 // (Limit the velocity to 0-1023)
	 } // 设置bit10为方向位，这时temp_velocity就是待发送的速度数据了
	 // (Set bit0 as direction bit, then temp_velocity is the data to be sended)
	 temp_velocity |= (temp_sign << 10); temp_value_h = (unsigned char)(temp_velocity >> 8); // 将16bit数据拆为2个8bit数据
 888:	95 2f       	mov	r25, r21
 88a:	99 0f       	add	r25, r25
 88c:	99 0f       	add	r25, r25
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	82 2b       	or	r24, r18
 892:	93 2b       	or	r25, r19
 894:	29 2f       	mov	r18, r25
	 // (Split the 16 bits to 2 bytes)
	 temp_value_l = (unsigned char)temp_velocity;
 896:	98 2f       	mov	r25, r24
	 PORTG &= ~_BV(PG4);
 898:	80 91 65 00 	lds	r24, 0x0065
 89c:	8f 7e       	andi	r24, 0xEF	; 239
 89e:	80 93 65 00 	sts	0x0065, r24
	 	 PORTG |= _BV(PG3); // 使总线处于主机发送状态 // (Set the bus to host transmit state)
 8a2:	80 91 65 00 	lds	r24, 0x0065
 8a6:	88 60       	ori	r24, 0x08	; 8
 8a8:	80 93 65 00 	sts	0x0065, r24
	 UCSR0A |= (1<<TXC0); // 清除UART0写完成标志 // (Clear written flag of UART0)
 8ac:	5e 9a       	sbi	0x0b, 6	; 11
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8ae:	5d 9b       	sbis	0x0b, 5	; 11
 8b0:	fe cf       	rjmp	.-4      	; 0x8ae <SetServoVelocity+0x4a>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8b6:	5d 9b       	sbis	0x0b, 5	; 11
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <SetServoVelocity+0x52>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8ba:	8f ef       	ldi	r24, 0xFF	; 255
 8bc:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8be:	5d 9b       	sbis	0x0b, 5	; 11
 8c0:	fe cf       	rjmp	.-4      	; 0x8be <SetServoVelocity+0x5a>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8c2:	4c b9       	out	0x0c, r20	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8c4:	5d 9b       	sbis	0x0b, 5	; 11
 8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <SetServoVelocity+0x60>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8c8:	85 e0       	ldi	r24, 0x05	; 5
 8ca:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8cc:	5d 9b       	sbis	0x0b, 5	; 11
 8ce:	fe cf       	rjmp	.-4      	; 0x8cc <SetServoVelocity+0x68>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8d4:	5d 9b       	sbis	0x0b, 5	; 11
 8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <SetServoVelocity+0x70>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	8c b9       	out	0x0c, r24	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8dc:	5d 9b       	sbis	0x0b, 5	; 11
 8de:	fe cf       	rjmp	.-4      	; 0x8dc <SetServoVelocity+0x78>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8e0:	9c b9       	out	0x0c, r25	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8e2:	5d 9b       	sbis	0x0b, 5	; 11
 8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <SetServoVelocity+0x7e>
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8e6:	2c b9       	out	0x0c, r18	; 12
#include "servo.h"
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
 8e8:	5d 9b       	sbis	0x0b, 5	; 11
 8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <SetServoVelocity+0x84>
	 SendUart0Byte(5); // 发送数据长度为参数长度+2，参数长度为3 // (Send the length of frame)
	 SendUart0Byte(0x03); // 命令数据为“WRITE DATA” // (Send command “WRITE DATA”)
	 SendUart0Byte(0x20); // 舵机控制寄存器首地址 // (Send the start address of control register)
	 SendUart0Byte(temp_value_l); // 发送速度数据低位 // (Send the low byte of velocity)
	 SendUart0Byte(temp_value_h); // 发送速度数据高位 // (Send the high byte of velocity)
	 temp_sum = id + 5 + 0x03 + 0x20 + temp_value_l + temp_value_h; temp_sum = ~temp_sum; // 计算校验和 // (Calculate the checksum)
 8ec:	48 5d       	subi	r20, 0xD8	; 216
 8ee:	49 0f       	add	r20, r25
 8f0:	42 0f       	add	r20, r18
 8f2:	40 95       	com	r20
#include "system_init.h"              //定义与系统初始化有关函数

void SendUart0Byte(unsigned char data)
 {
       while ( !( UCSR0A & (1<<UDRE)) );   // 等待发送缓冲器为空 // waiting for finishing sending all datas in the Transmit Buffer
	   UDR0 = data;                       /* 将数据放入缓冲器，发送数据*/
 8f4:	4c b9       	out	0x0c, r20	; 12
	 SendUart0Byte(0x20); // 舵机控制寄存器首地址 // (Send the start address of control register)
	 SendUart0Byte(temp_value_l); // 发送速度数据低位 // (Send the low byte of velocity)
	 SendUart0Byte(temp_value_h); // 发送速度数据高位 // (Send the high byte of velocity)
	 temp_sum = id + 5 + 0x03 + 0x20 + temp_value_l + temp_value_h; temp_sum = ~temp_sum; // 计算校验和 // (Calculate the checksum)
	 SendUart0Byte(temp_sum); // 发送校验和 // (Send the checksum)
	 while ( !( UCSR0A & (1<<TXC0)) ) // 等待发送完成
 8f6:	5e 9b       	sbis	0x0b, 6	; 11
 8f8:	fe cf       	rjmp	.-4      	; 0x8f6 <SetServoVelocity+0x92>
	        {   ;}           // (Waiting for finishing sending)

	 PORTG |= _BV(PG4);
 8fa:	80 91 65 00 	lds	r24, 0x0065
 8fe:	80 61       	ori	r24, 0x10	; 16
 900:	80 93 65 00 	sts	0x0065, r24

		 PORTG &= ~_BV(PG3);  // 使总线处于主机接收状态 // (Set the UART bus to host receiving state)
 904:	80 91 65 00 	lds	r24, 0x0065
 908:	87 7f       	andi	r24, 0xF7	; 247
 90a:	80 93 65 00 	sts	0x0065, r24
 90e:	80 e4       	ldi	r24, 0x40	; 64
 910:	9f e1       	ldi	r25, 0x1F	; 31
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	f1 f7       	brne	.-4      	; 0x912 <SetServoVelocity+0xae>
	 _delay_ms(2);      // 发送完成后，总线会被从机占用，反馈应答数据，所以进行延时
	 }
 916:	08 95       	ret

00000918 <Init_Gpio>:
#include <avr/interrupt.h>
#include "system_init.h"

void Init_Gpio(void)
{
    DDRE &= ~(_BV(PE5) | _BV(PE4));
 918:	82 b1       	in	r24, 0x02	; 2
 91a:	8f 7c       	andi	r24, 0xCF	; 207
 91c:	82 b9       	out	0x02, r24	; 2
	PORTE |= (_BV(PE5) | _BV(PE4));
 91e:	83 b1       	in	r24, 0x03	; 3
 920:	80 63       	ori	r24, 0x30	; 48
 922:	83 b9       	out	0x03, r24	; 3
}
 924:	08 95       	ret

00000926 <ADC_Init>:

void ADC_Init(void)
{

	DDRF  = 0X00;		                     //PF用于ADC0~ADC7
 926:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0X00;		                     //禁止内部上拉
 92a:	10 92 62 00 	sts	0x0062, r1
	ADMUX   = 0B01000000;                    //REFS1:REFS0=01 AVCC为基准电压;ADLAR=1 右对齐
 92e:	80 e4       	ldi	r24, 0x40	; 64
 930:	87 b9       	out	0x07, r24	; 7
	ADCSRA  = 0B10000110;                    //ADEN=1 ADC使能；ADPS2:0=110 64分频
 932:	86 e8       	ldi	r24, 0x86	; 134
 934:	86 b9       	out	0x06, r24	; 6
}
 936:	08 95       	ret

00000938 <Get_ADC>:


unsigned int Get_ADC(unsigned char ID)       //参数为为AD通道ID号
{
	unsigned int temp = 0;
	ADMUX  =  0x40|ID;                       //端口选择需要先清除
 938:	80 64       	ori	r24, 0x40	; 64
 93a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);                     //开始转换
 93c:	36 9a       	sbi	0x06, 6	; 6
	while(!( ADCSRA  &  (1<<ADIF) ) );       //等待转换完成
 93e:	34 9b       	sbis	0x06, 4	; 6
 940:	fe cf       	rjmp	.-4      	; 0x93e <Get_ADC+0x6>
	temp = ADCL+ADCH*256;
 942:	94 b1       	in	r25, 0x04	; 4
 944:	85 b1       	in	r24, 0x05	; 5
	ADCSRA |= (1<<ADIF);	                 //标志位清除
 946:	34 9a       	sbi	0x06, 4	; 6
 948:	38 2f       	mov	r19, r24
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	29 0f       	add	r18, r25
 94e:	31 1d       	adc	r19, r1
	return temp;
}
 950:	c9 01       	movw	r24, r18
 952:	08 95       	ret

00000954 <PWM_init>:

/***************PWM初始化**********************/
void PWM_init()
{	
	DDRC=0XF0;                               //PB5,PB6  输出对应于OC1A,OC1B
 954:	80 ef       	ldi	r24, 0xF0	; 240
 956:	84 bb       	out	0x14, r24	; 20
	DDRB|=0X60;  
 958:	87 b3       	in	r24, 0x17	; 23
 95a:	80 66       	ori	r24, 0x60	; 96
 95c:	87 bb       	out	0x17, r24	; 23
    TCCR1A = 0b10100010;
 95e:	82 ea       	ldi	r24, 0xA2	; 162
 960:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;
 962:	8a e1       	ldi	r24, 0x1A	; 26
 964:	8e bd       	out	0x2e, r24	; 46
	TCCR1C=0X00;
 966:	10 92 7a 00 	sts	0x007A, r1
	ICR1=300;                                //最大的比对值
 96a:	8c e2       	ldi	r24, 0x2C	; 44
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	97 bd       	out	0x27, r25	; 39
 970:	86 bd       	out	0x26, r24	; 38
}
 972:	08 95       	ret

00000974 <move>:
void move(int l_speed,int r_speed)           //l_speed,r_speed的范围为-300 ~ +300

{                                            //当速度达到200~300时基本没有太大的变化
 974:	9c 01       	movw	r18, r24
    if(l_speed>=0&&r_speed>=0)
 976:	97 fd       	sbrc	r25, 7
 978:	0d c0       	rjmp	.+26     	; 0x994 <move+0x20>
 97a:	77 fd       	sbrc	r23, 7
 97c:	03 c0       	rjmp	.+6      	; 0x984 <move+0x10>
	{     
		PORTC=0xA0; 
 97e:	80 ea       	ldi	r24, 0xA0	; 160
 980:	85 bb       	out	0x15, r24	; 21
 982:	16 c0       	rjmp	.+44     	; 0x9b0 <move+0x3c>
	}
    else if(l_speed>0&&r_speed<0)
 984:	00 97       	sbiw	r24, 0x00	; 0
 986:	61 f0       	breq	.+24     	; 0x9a0 <move+0x2c>
	{     
		PORTC=0x60; 
 988:	80 e6       	ldi	r24, 0x60	; 96
 98a:	85 bb       	out	0x15, r24	; 21
		r_speed=0-r_speed;
 98c:	70 95       	com	r23
 98e:	61 95       	neg	r22
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <move+0x3c>
	}
	else if(l_speed<0&&r_speed>0)   
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	1c f4       	brge	.+6      	; 0x9a0 <move+0x2c>
	{     
		PORTC=0x90;
 99a:	80 e9       	ldi	r24, 0x90	; 144
 99c:	85 bb       	out	0x15, r24	; 21
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <move+0x36>
		l_speed=0-l_speed;
	}
	else
	{
		PORTC = 0X50;
 9a0:	80 e5       	ldi	r24, 0x50	; 80
 9a2:	85 bb       	out	0x15, r24	; 21
		r_speed=0-r_speed;l_speed=0-l_speed;
 9a4:	70 95       	com	r23
 9a6:	61 95       	neg	r22
 9a8:	7f 4f       	sbci	r23, 0xFF	; 255
 9aa:	30 95       	com	r19
 9ac:	21 95       	neg	r18
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	OCR1A = l_speed;
 9b0:	3b bd       	out	0x2b, r19	; 43
 9b2:	2a bd       	out	0x2a, r18	; 42
	OCR1B = r_speed;
 9b4:	79 bd       	out	0x29, r23	; 41
 9b6:	68 bd       	out	0x28, r22	; 40


	
}
 9b8:	08 95       	ret

000009ba <USART1_init>:

void USART1_init()
{
	UCSR1A = 0X00;
 9ba:	10 92 9b 00 	sts	0x009B, r1
	/*接收结束中断使能， 接收器与发送器使能(1<<RXCIE0)|*/
	UCSR1B = 0B00011000;
 9be:	88 e1       	ldi	r24, 0x18	; 24
 9c0:	80 93 9a 00 	sts	0x009A, r24
	/* 设置帧格式: 异步，禁止奇偶校验，1个停止位，8个数据位*/
	UCSR1C = 0B00000110;
 9c4:	86 e0       	ldi	r24, 0x06	; 6
 9c6:	80 93 9d 00 	sts	0x009D, r24
	/* 设置波特率为9600*/
	UBRR1L = 103;
 9ca:	87 e6       	ldi	r24, 0x67	; 103
 9cc:	80 93 99 00 	sts	0x0099, r24
}
 9d0:	08 95       	ret

000009d2 <USART1_send>:


void USART1_send(unsigned char data)
{
 9d2:	98 2f       	mov	r25, r24
	/* 等待发送缓冲器为空 */
	while ( !( UCSR1A & (1<<UDRE)) ) ;
 9d4:	80 91 9b 00 	lds	r24, 0x009B
 9d8:	85 ff       	sbrs	r24, 5
 9da:	fc cf       	rjmp	.-8      	; 0x9d4 <USART1_send+0x2>
	/* 将数据放入缓冲器，发送数据*/
	UDR1 = data;
 9dc:	90 93 9c 00 	sts	0x009C, r25
}
 9e0:	08 95       	ret

000009e2 <USART1_recieve>:

unsigned char USART1_recieve()
{
	/* 等待接收数据*/
	while ( !(UCSR1A & (1<<RXC)) ) ;
 9e2:	80 91 9b 00 	lds	r24, 0x009B
 9e6:	87 ff       	sbrs	r24, 7
 9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <USART1_recieve>
	/* 从缓冲器中获取并返回数据*/
	return UDR1;
 9ea:	80 91 9c 00 	lds	r24, 0x009C
}
 9ee:	08 95       	ret

000009f0 <Init_Uart0>:
#include <avr/interrupt.h>
#include "system_init.h"

void Init_Gpio(void)
{
    DDRE &= ~(_BV(PE5) | _BV(PE4));
 9f0:	82 b1       	in	r24, 0x02	; 2
 9f2:	8f 7c       	andi	r24, 0xCF	; 207
 9f4:	82 b9       	out	0x02, r24	; 2
	PORTE |= (_BV(PE5) | _BV(PE4));
 9f6:	83 b1       	in	r24, 0x03	; 3
 9f8:	80 63       	ori	r24, 0x30	; 48
 9fa:	83 b9       	out	0x03, r24	; 3
	return UDR1;
}
void Init_Uart0(void)
{
	Init_Gpio();
    UCSR0A = 0x02;                  // 设置为倍速模式（Set to double velocity mode）                    // 主时钟频率为16M时，波特率为1M // (Set main clock to 16M, baud rate to 1M)
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	8b b9       	out	0x0b, r24	; 11
	UBRR0H=0X00;
 a00:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0X01;                    // 接收器与发送器使能 // (Enable UART0’s receiver and transmitter)
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	89 b9       	out	0x09, r24	; 9
    UCSR0B = (1<<RXEN)|(1<<TXEN);   // 设置帧格式: 8 个数据位, 1 个停止位 // (Set data frame:8 data bits,1 stop bit)接收中断使能
 a08:	88 e1       	ldi	r24, 0x18	; 24
 a0a:	8a b9       	out	0x0a, r24	; 10
    UCSR0C = (3<<UCSZ0);            /* 设置端口状态(Set port state) */
 a0c:	86 e0       	ldi	r24, 0x06	; 6
 a0e:	80 93 95 00 	sts	0x0095, r24
    DDRE &= ~_BV(PE0);              // 初始化RX端口默认方向为输入 // (Set default direction of RX to input mode)
 a12:	10 98       	cbi	0x02, 0	; 2
	PORTE &= ~_BV(PE0);             // 初始化RX端口默认状态为高阻 // (Set default state of RX to tri-state)
 a14:	18 98       	cbi	0x03, 0	; 3
	DDRE |= _BV(PE1);               // 初始化TX端口默认方向为输出 // (Set default direction of TX to output mode)
 a16:	11 9a       	sbi	0x02, 1	; 2
	PORTE |= _BV(PE1);              // 初始化TX端口默认状态为高电平 // (Set default state of RX to high state)
 a18:	19 9a       	sbi	0x03, 1	; 3
	DDRG |= _BV(PG3);               // 初始化使能端口状态方向为输出 // (Enable direction of Port A as output)
 a1a:	a4 e6       	ldi	r26, 0x64	; 100
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	8c 91       	ld	r24, X
 a20:	88 60       	ori	r24, 0x08	; 8
 a22:	8c 93       	st	X, r24
	PORTG &= ~_BV(PG3);             // 初始化使能端口状态为RX状态 // (Set Port A state as same to RX)
 a24:	e5 e6       	ldi	r30, 0x65	; 101
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	87 7f       	andi	r24, 0xF7	; 247
 a2c:	80 83       	st	Z, r24
	DDRG |= _BV(PG4);               // 初始化使能端口状态方向为输出 // (Set Port A state as same to RX)
 a2e:	8c 91       	ld	r24, X
 a30:	80 61       	ori	r24, 0x10	; 16
 a32:	8c 93       	st	X, r24
    PORTG |= _BV(PG4);              // 初始化使能端口状态方为RX状态 // (Set Port A state as same to RX)
 a34:	80 81       	ld	r24, Z
 a36:	80 61       	ori	r24, 0x10	; 16
 a38:	80 83       	st	Z, r24
}
 a3a:	08 95       	ret

00000a3c <System_Init>:

void System_Init(void)
{
	Init_Uart0();
 a3c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Init_Uart0>
	
}

void USART1_init()
{
	UCSR1A = 0X00;
 a40:	10 92 9b 00 	sts	0x009B, r1
	/*接收结束中断使能， 接收器与发送器使能(1<<RXCIE0)|*/
	UCSR1B = 0B00011000;
 a44:	88 e1       	ldi	r24, 0x18	; 24
 a46:	80 93 9a 00 	sts	0x009A, r24
	/* 设置帧格式: 异步，禁止奇偶校验，1个停止位，8个数据位*/
	UCSR1C = 0B00000110;
 a4a:	86 e0       	ldi	r24, 0x06	; 6
 a4c:	80 93 9d 00 	sts	0x009D, r24
	/* 设置波特率为9600*/
	UBRR1L = 103;
 a50:	87 e6       	ldi	r24, 0x67	; 103
 a52:	80 93 99 00 	sts	0x0099, r24

void System_Init(void)
{
	Init_Uart0();
    USART1_init();
}
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
